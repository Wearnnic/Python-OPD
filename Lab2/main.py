import logging
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import asyncio

logging.basicConfig(level=logging.INFO)

API_TOKEN = '8187319698:AAFBwQbTitqZAztaOsHsqn5XIJl-z6J_qcE'

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

router = Router()
dp.include_router(router)

class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_race_type = State()

@router.message(Command("start", "help"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üèÉ‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–∞—Ä–∞—Ñ–æ–Ω! üèÉ‚Äç‚ôÄÔ∏è\n"
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
    )
    await state.set_state(RegistrationStates.waiting_for_name)

@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ùó –§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        return
    await state.update_data(name=name)

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="üèÖ 5 –∫–º"),
                types.KeyboardButton(text="ü•á 10 –∫–º"),
            ],
            [
                types.KeyboardButton(text="üéΩ –ü–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω"),
                types.KeyboardButton(text="üèÜ –ú–∞—Ä–∞—Ñ–æ–Ω"),
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–±–µ–≥–∞:", reply_markup=keyboard)
    await state.set_state(RegistrationStates.waiting_for_race_type)

@router.message(RegistrationStates.waiting_for_race_type)
async def process_race_type(message: types.Message, state: FSMContext):
    race_type = message.text
    valid_races = ["üèÖ 5 –∫–º", "ü•á 10 –∫–º", "üéΩ –ü–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω", "üèÜ –ú–∞—Ä–∞—Ñ–æ–Ω"]
    if race_type not in valid_races:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–±–µ–≥–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    data = await state.get_data()
    name = data.get("name")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
    with open("registrations.txt", "a", encoding="utf-8") as f:
        f.write(f"{name} - {race_type}\n")

    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
        f"–§–ò–û: {name}\n"
        f"–¢–∏–ø –∑–∞–±–µ–≥–∞: {race_type}",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()

async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
